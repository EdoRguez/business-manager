// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO 
  customer.customer (
    company_id,
    first_name,
    last_name,
    email,
    phone,
    identification_number,
    identification_type
  ) 
VALUES (
  $1, $2, $3, $4, $5, $6, $7
) 
RETURNING id, company_id, first_name, last_name, email, phone, identification_number, identification_type, created_at, modified_at
`

type CreateCustomerParams struct {
	CompanyID            int64          `json:"company_id"`
	FirstName            string         `json:"first_name"`
	LastName             sql.NullString `json:"last_name"`
	Email                sql.NullString `json:"email"`
	Phone                sql.NullString `json:"phone"`
	IdentificationNumber string         `json:"identification_number"`
	IdentificationType   string         `json:"identification_type"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (CustomerCustomer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.CompanyID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.IdentificationNumber,
		arg.IdentificationType,
	)
	var i CustomerCustomer
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.IdentificationNumber,
		&i.IdentificationType,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM 
  customer.customer
WHERE 
  id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT 
  id,
  company_id,
  first_name,
  last_name,
  email,
  phone,
  identification_number,
  identification_type,
  created_at,
  modified_at
FROM 
  customer.customer
WHERE 
  id = $1 
LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (CustomerCustomer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i CustomerCustomer
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.IdentificationNumber,
		&i.IdentificationType,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCustomers = `-- name: GetCustomers :many
SELECT 
  id,
  company_id,
  first_name,
  last_name,
  email,
  phone,
  identification_number,
  identification_type,
  created_at,
  modified_at
FROM 
  customer.customer
WHERE
  (company_id = $1) OR $1 = 0
ORDER BY 
  id
LIMIT 
  $2
OFFSET 
  $3
`

type GetCustomersParams struct {
	CompanyID int64 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetCustomers(ctx context.Context, arg GetCustomersParams) ([]CustomerCustomer, error) {
	rows, err := q.db.QueryContext(ctx, getCustomers, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerCustomer{}
	for rows.Next() {
		var i CustomerCustomer
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.IdentificationNumber,
			&i.IdentificationType,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE 
  customer.customer
SET 
  first_name = $2,
  last_name = $3,
  email = $4,
  phone = $5,
  identification_number = $6,
  identification_type = $7,
  modified_at = NOW()
WHERE 
  id = $1
RETURNING id, company_id, first_name, last_name, email, phone, identification_number, identification_type, created_at, modified_at
`

type UpdateCustomerParams struct {
	ID                   int64          `json:"id"`
	FirstName            string         `json:"first_name"`
	LastName             sql.NullString `json:"last_name"`
	Email                sql.NullString `json:"email"`
	Phone                sql.NullString `json:"phone"`
	IdentificationNumber string         `json:"identification_number"`
	IdentificationType   string         `json:"identification_type"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (CustomerCustomer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.IdentificationNumber,
		arg.IdentificationType,
	)
	var i CustomerCustomer
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.IdentificationNumber,
		&i.IdentificationType,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
