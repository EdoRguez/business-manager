// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: role.sql

package db

import (
	"context"
)

const getRole = `-- name: GetRole :one
SELECT 
  id,
  name,
  description,
  created_at,
  modified_at
FROM 
  auth.role
WHERE 
  id = $1 
LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int64) (AuthRole, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i AuthRole
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT 
  id,
  name,
  description,
  created_at,
  modified_at
FROM 
  auth.role
ORDER BY 
  id
LIMIT 
  $1
OFFSET 
  $2
`

type GetRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetRoles(ctx context.Context, arg GetRolesParams) ([]AuthRole, error) {
	rows, err := q.db.QueryContext(ctx, getRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuthRole{}
	for rows.Next() {
		var i AuthRole
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
